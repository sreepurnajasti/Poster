{"version":3,"sources":["components/Posts.js","actions/postActions.js","actions/types.js","components/Formpost.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Posts","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","componentWillMount","props","fetchPosts","componentWillReceiveProps","nextProps","newPost","posts","unshift","inherits","createClass","key","value","displayPost","map","p","react_default","a","createElement","id","title","body","Component","PropTypes","func","isRequired","array","object","connect","state","dispatch","fetch","then","res","json","data","type","payload","Formpost","onChange","e","setState","defineProperty","target","name","onSubmit","preventDefault","bind","assertThisInitialized","method","headers","content-type","JSON","stringify","initialState","combineReducers","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","className","components_Formpost","components_Posts","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94a42f8f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { fetchPosts } from '../actions/postActions'\r\n\r\nexport class Posts extends Component {\r\n  componentWillMount = () => {\r\n    this.props.fetchPosts();\r\n  }\r\n\r\n  componentWillReceiveProps = (nextProps) =>{\r\n    if(nextProps.newPost) {\r\n      this.props.posts.unshift(nextProps.newPost);\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    const displayPost = this.props.posts.map(p => (\r\n      <div key={p.id}>\r\n        <h3>{p.id} {p.title} </h3>\r\n        <p> {p.body} </p>\r\n      </div>\r\n    ))\r\n\r\n    return (\r\n      <div>\r\n        <h1> POSTS </h1>\r\n        {displayPost}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nPosts.PropTypes = {\r\n  fetchPosts: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  newPost: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  // this is the name given in index.js reducers for postreducers:this is the name of the element in the  initial state of posts\r\n  posts: state.posts.posts,\r\n  newPost: state.posts.newPost\r\n})\r\n\r\nexport default connect(mapStateToProps, {fetchPosts})(Posts)\r\n","import { FETCH_POSTS, NEW_POST } from \"./types\";\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n    .then(res => res.json())\r\n    .then(data =>\r\n      dispatch({\r\n        type: FETCH_POSTS,\r\n        payload: data\r\n      })\r\n    );\r\n};\r\n\r\nexport const newPost = (data) => dispatch => {\r\n  fetch('https://jsonplaceholder.typicode.com/posts', {\r\n      method: 'POST',\r\n      headers:{\r\n        \"content-type\":\"application/json; charset=utf-8\"\r\n      },\r\n      body:JSON.stringify(data)\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => dispatch({\r\n      type: NEW_POST,\r\n      payload: data\r\n    }))\r\n}","export const FETCH_POSTS = \"FETCH_POSTS\"\r\nexport const NEW_POST = \"NEW_POST\"\r\n","import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { connect } from \"react-redux\"\r\nimport { newPost } from \"../actions/postActions\"\r\n\r\nexport class Formpost extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n       title: '',\r\n       body: ''\r\n    }\r\n    this.onChange = this.onChange.bind(this)\r\n    this.onSubmit = this.onSubmit.bind(this)\r\n  }\r\n  \r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n  \r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const data = {\r\n      title: this.state.title,\r\n      body: this.state.body\r\n    };\r\n    //call action - newPost\r\n    this.props.newPost(data)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1> ADD A POST </h1>\r\n        <form onSubmit={this.onSubmit}>\r\n          <div>\r\n            <label>Title: </label>\r\n            <input type=\"text\" name=\"title\" onChange={this.onChange} />\r\n          </div>\r\n          <br />\r\n          <div>\r\n            <label>Body: </label>\r\n            <textarea name=\"body\" onChange={this.onChange} />\r\n          </div>\r\n          <br />\r\n          <div>\r\n            <button>Submit</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nFormpost.PropTypes = {\r\n  newPost: PropTypes.func.isRequired\r\n}\r\n// const mapStateToProps = state => ({});\r\n\r\nexport default connect(\r\n  null,\r\n  {newPost}\r\n)(Formpost);\r\n","import {FETCH_POSTS, NEW_POST} from '../actions/types'\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  newPost : {}\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n  switch(action.type){\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        posts: action.payload\r\n      }\r\n    case NEW_POST:\r\n      return {\r\n        ...state,\r\n        newPost: action.payload\r\n      }\r\n    default:\r\n    return state\r\n  }\r\n}","import {combineReducers} from 'redux'\r\nimport postReducer from './postReducer'\r\n\r\nexport default combineReducers({\r\n  posts: postReducer\r\n})","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Posts from './components/Posts'\nimport Formpost from './components/Formpost'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Formpost/>\n          <Posts/ >\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}